dat_demo$position.factor <- factor(dat_demo$education, levels = c(1:5), labels = c("Undergrad", "Grad", "Postdoc/fellow", "Professor", "Other"))
# Academic sample - education attained
dat_demo$education.factor <- factor(dat_demo$education, levels = c(1:5), labels = c("some uni/college", "bachelors", "masters", "PhD", "Other"))
# Academic sample - sex
dat_demo$sex_acad.factor <- factor(dat_demo$gender, levels = c(1:3), labels = c("Male", "Female", "Other"))
# Academic sample - organization/affiliation
dat_demo$org.factor <- factor(dat_demo$org, levels = c(1:5), labels = c("College/University", "Government", "Private Company", "Self-Employed", "Other"))
# Chunk 9: Academic sample descriptives
#datasets that are filtered by phase (1 = May, 2 = November)
phase1 <- filter(dat, phase == 1)
phase2 <- filter(dat, phase == 2)
# Phase 1 & 2further filtered to only include academics won't be necessary once we have updated objective data
phase1_exp <- filter(phase1, isExpert == 1)
phase2_exp <-filter(phase2, isExpert == 1)
# dataset that only includes academic predictions
academic_only <- filter(dat, isExpert == 1)
# Number of predictions by project phase + group
num_forecast <- dat %>% group_by(phase, isExpert.factor) %>%
dplyr::summarise(
N = length(isExpert.factor),
Percent =  N / nrow(dat)
)
print(num_forecast)
# Number of teams per phase
team_num <- academic_only %>% group_by(phase) %>%
dplyr::summarise(
numberOfTeams = length(unique(team_name))
)
# Number of teams total
team_num_total <- length(unique(academic_only$team_name))
# 121 teams total, 86 teams participated during phase 1 (88th team is NA because I didn't filter out lay sample and 87th team indicated their predictions were for another country), 72 during phase 2
# Filter so that only one row per team is retained
unique_teams <- academic_only[!duplicated(academic_only$team_name),]
describe(unique_teams$team_size.coded)
#    vars   n mean   sd median trimmed mad min max range skew kurtosis   se
# X1    1 105 1.66 1.16      1     1.4   0   1   7     6 2.04     4.32 0.11
# team size ranged from 1-7, n = 100, Md = 1, M = 1.67
# 1 was the most common team size (65%)
# Summarize spread of teams size (does not exclude NAs)
as.data.frame(table(unique_teams$team_size.coded))
#   team_size.coded  N               Percent
# 1         1 70 0.5737704918032786594
# 2         2 16 0.1311475409836065642
# 3         3 10 0.0819672131147540922
# 4         4  5 0.0409836065573770461
# 5         5  3 0.0245901639344262291
# 6         7  1 0.0081967213114754103
# 7        NA 17 0.1393442622950819554
# Filter data set by project wave
phase1_team <- filter(unique_teams, team_name %in% phase1$team_name)
# distribution of team size for phase 1
as.data.frame(table(phase1_team$team_size.coded))
#   team_size.coded  N              Percent
# 1         1 48 0.551724137931034475
# 2         2 12 0.137931034482758619
# 3         3  5 0.057471264367816091
# 4         4  4 0.045977011494252873
# 5         5  2 0.022988505747126436
# 6         7  1 0.011494252873563218
# 7        NA 15 0.172413793103448287
phase2_team <- filter(unique_teams, team_name %in% phase2$team_name)
# distribution of team size for phase 2
as.data.frame(table(phase2_team$team_size.coded))
# Number of predictions below/above RMSE cutoff
# overall
as.data.frame(table(phase1_exp$RMSE_cutoff_Naive_linear.factor))
#   RMSE_cutoff.factor     N
#
# 1 below cutoff          109 - 30%
# 2 above cutoff         251  - 70%
# 70% of predictions were above the RMSE cutoff
# Per domain
naive_RMSE_domain <- phase1_exp %>% group_by(domain, RMSE_cutoff_Naive_linear.factor) %>%
dplyr::summarise(
N = length(RMSE_cutoff_Naive_linear.factor)
)
naive_RMSE_domain$Percent <- NA
for (i in 1:nrow(naive_RMSE_domain)) {
filter <- filter(phase1_exp, domain == naive_RMSE_domain$domain[i])
naive_RMSE_domain$Percent[i] <- naive_RMSE_domain$N[i] / nrow(filter)
}
# Implicit Asian bias, explicit African American, and positive affect were all 100% above the cutoff
# More than 60% of predictions for implicit gender, ideology-republican, and ideology-democrat were below the cutoff
# look at multi-disciplinarity
multidisciplinarity <- phase1_exp %>% group_by(is_multidisciplinary) %>%
dplyr::summarise(
N = length(is_multidisciplinary),
Percent = N / nrow(phase1_exp)
)
#   is_multidisciplinary     N Percent
#
# 1                    0   301  0.836
# 2                    1    20  0.0556
# 3                   NA    39  0.108
# Chunk 10: Prolific Descriptives
# List of descriptives for prolific sample
# filter sample to only include unflagged Prolific responses
dat_lay_demo <- subset(dat, isExpert == 0 & flag_lay_response == 0)
# time spent on upload task
time_spent_desc_up <- describe(dat_lay_demo$time_upload)
#    vars    n   mean     sd median trimmed   mad min     max   range skew kurtosis   se
# X1    1 2226 126.69 200.94   75.1   87.48 68.64   0 3434.49 3434.49 6.47    75.26 4.26
age_stats <- describe(dat_lay_demo$Age)
#    vars    n  mean    sd median trimmed mad min max range skew kurtosis   se
# X1    1 2200 29.94 10.18     28    28.5 8.9  18  78    60 1.33     1.95 0.22
#Education
prolific_edu <- dat_lay_demo %>% group_by(education.factor) %>%
dplyr::summarise(
N = length(education.factor),
Percent =  N / nrow(dat_lay_demo)
)
as.data.frame(table(dat_lay_demo$education.factor))
#   education.factor                 N Percent
#
# 1 less than highschool             5 0.00340
# 2 high school                    114 0.0776
# 3 some college                   341 0.232
# 4 Vocation or technical school    59 0.0401
# 5 Bachelor's                     582 0.396
# 6 Master's                       226 0.154
# 7 Doctorate                       24 0.0163
# 8 Professional degree             41 0.0279
# 9 NA                              78 0.0531
# Ethnicity
prolific_eth <- dat_lay_demo %>% group_by(Ethnicity.factor) %>%
dplyr::summarise(
N = length(Ethnicity.factor),
Percent =  N / nrow(dat_lay_demo)
)
as.data.frame(table(dat_lay_demo$Ethnicity.factor))
#    Ethnicity.factor      N Percent
#
#  1 Aboriginal/Native    10 0.00680
#  2 Asian               237 0.161
#  3 Black               131 0.0891
#  4 White               828 0.563
#  5 Middle Eastern       10 0.00680
#  6 Hispanic            103 0.0701
#  7 East Indian          11 0.00748
#  8 Mixed Race           48 0.0327
#  9 Other/Not Listed     11 0.00748
# 10 NA                   81 0.0551
# Religion
prolific_rel <- dat_lay_demo %>% group_by(Religion.factor) %>%
dplyr::summarise(
N = length(Religion.factor),
Percent =  N / nrow(dat_lay_demo)
)
#    Religion.factor            N  Percent
#
#  1 Buddhist                  29 0.0197
#  2 Christian - Catholic     199 0.135
#  3 Christian - Protestant   214 0.146
#  4 Christian - Other        131 0.0891
#  5 Hindu                     27 0.0184
#  6 Jewish                    36 0.0245
#  7 Muslim                    57 0.0388
#  8 Sikh                       2 0.00136
#  9 Other                     57 0.0388
# 10 Non-Religious            638 0.434
# 11 NA                        80 0.0544
# Politics
prolific_pol <- dat_lay_demo %>% group_by(Politics_1) %>%
dplyr::summarise(
N = length(Politics_1),
Percent =  N / nrow(dat_lay_demo)
)
#   Politics_1     N Percent
#
# 1          1   343  0.233
# 2          2   313  0.213
# 3          3   192  0.131
# 4          4   300  0.204
# 5          5   128  0.0871
# 6          6    84  0.0571
# 7          7    32  0.0218
# 8         NA    78  0.0531
# Residential Area
prolific_res <- dat_lay_demo %>% group_by(Residential.Area.factor) %>%
dplyr::summarise(
N = length(Residential.Area.factor),
Percent =  N / nrow(dat_lay_demo)
)
#   Residential.Area.factor     N Percent
#
# 1 Urban                     452  0.307
# 2 Suburban                  791  0.538
# 3 Rural                     147  0.1
# 4 NA                         80  0.0544
# Income
prolific_inc <- dat_lay_demo %>% group_by(Income.factor) %>%
dplyr::summarise(
N = length(Income.factor),
Percent =  N / nrow(dat_lay_demo)
)
#   Income.factor           N Percent
#
# 1 Under $15,000          92  0.0626
# 2 $15,001 - $25,000     106  0.0721
# 3 $25,001 - $35,000     129  0.0878
# 4 $35,001 - $50,000     179  0.122
# 5 $50,001 - $75,000     292  0.199
# 6 $75,001 - $100,000    227  0.154
# 7 $100,001 - $150,000   189  0.129
# 8 Over $150,000         165  0.112
# 9 NA                     91  0.0619
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(psych)
library(tidyverse)
library(irr)
library(lme4)
library(ggplot2)
library(tidyr)
library(emmeans)
library(car)
library(jtools)
library(dplyr)
library(ggsci)
library(dplyr)
library(Hmisc)
options(max.print = 20000, scipen = 1000)
setwd("~/GitHub/Forecasting-Tournament") #igor's working directory
dat <- read.csv("dat_for_analyses.csv", stringsAsFactors = FALSE)
dat_long <- read.csv("dat_long.csv", stringsAsFactors = FALSE)
# dataset that only includes academic predictions and those who provided open-ended data
academic_only <- filter(dat, isExpert == 1 & !is.na(Method.code))
#datasets that are filtered by phase (1 = May submission, 2 = November submission)
phase1 <- filter(dat, phase == 1& !is.na(Method.code))
phase2 <- filter(dat, phase == 2& !is.na(Method.code))
# Phase 1 & 2further filtered to only include academics won't be necessary once we have updated objective data
phase1_exp <- filter(phase1, isExpert == 1& !is.na(Method.code))
phase2_exp <-filter(phase2, isExpert == 1& !is.na(Method.code))
#####download of phase 1 and 2 files########################
t1.academ.sorted<-phase1_exp %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>% select(team_name,domain,Month.1:Month.12,mean_abs_error_w1,MASE1_w1,Method.code)
t1.nonacadem.av.sorted<-phase1 %>% filter(isExpert.factor == 'Prolific') %>% select(team_name,domain,Month.1:Month.12,mean_abs_error_w1,MASE1_w1,Method.code) %>%
group_by(domain) %>% summarise(across(where(is.numeric), mean)) %>% arrange(domain,MASE1_w1) %>% mutate(team_name="average non-academic")
t1.nonacadem.median.sorted<-phase1 %>% filter(isExpert.factor == 'Prolific') %>% select(team_name,domain,Month.1:Month.12,mean_abs_error_w1,MASE1_w1,,Method.code) %>%
group_by(domain) %>% summarise(across(where(is.numeric), median)) %>% arrange(domain,MASE1_w1) %>% mutate(team_name="median non-academic")
t1.nonacadem.best.sorted<-phase1 %>% filter(isExpert.factor == 'Prolific') %>% select(team_name,domain,Month.1:Month.12,mean_abs_error_w1,MASE1_w1,Method.code) %>%
group_by(domain) %>% summarise(across(where(is.numeric), min)) %>% arrange(domain,MASE1_w1) %>% mutate(team_name="top non-academic")
t1.academ.best.sorted<-phase1 %>% filter(isExpert.factor == 'Academic') %>% select(team_name,domain,Month.1:Month.12,mean_abs_error_w1,MASE1_w1,Method.code) %>%
group_by(domain) %>% summarise(across(where(is.numeric), min)) %>% arrange(domain,MASE1_w1) %>% mutate(team_name="top academic")
t1.top.scores<-rbind(t1.academ.best.sorted,t1.nonacadem.best.sorted)%>% arrange(domain,MASE1_w1)
#so, only for life satisfaction and polarization, best academic was better than best non-academic. For all other domains, non-academics were in fact better (but note that the sample of non-academic was larger)
#what is the percentage of academics and lay people, respectively, who were below 1 on MASE?
t1.scores<-rbind(t1.academ.sorted,t1.nonacadem.median.sorted)
write.csv(t1.scores,"wave1.scores.csv")
t2.academ.sorted<-academic_only %>%filter(!(phase == 1 & revised == 1)) %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% select(team_name,domain,Month.7:Month.12,mean_abs_error_w2,MASE1_w2,Method.code)
write.csv(t2.academ.sorted,"wave2.scores.csv")
t2.academ.sorted<-academic_only %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% select(team_name,domain,Month.7:Month.12,mean_abs_error_w2,MASE1_w2,Method.code,phase,revised)
write.csv(t2.academ.sorted,"wave2.scores.csv")
pd <- position_dodge(0.7) # move them .07 to the left and right
labels<-c(
eafric = "Exp. Af-Am. Bias",
easian = "Exp. As-Am. Bias",
egend = "Exp. Gender Bias",
iafric = "Imp. Af-Am. Bias",
iasian = "Imp. As.-Am. Bias",
ideoldem = "Democrats",
ideolrep ="Republicans",
igend = "Imp. Gender Bias",
lifesat = "Life Satisfaction",
negaffect = "Negative Affect",
polar = "Polit. Polarization",
posaffect = "Positive Affect")
top.5.MASE.t1<-phase1 %>% filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>% dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)
top.1.MASE.t1<-phase1 %>% filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>% dplyr::slice_head(n = 1) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)
View(top.1.MASE.t1)
names(phase1)
top.1.MASE.t1<-phase1 %>% filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>% dplyr::slice_head(n = 1) %>% select(team_name,MASE1_w1,domain,compare_to_naive_linear,compare_to_naive_rwf,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)
View(top.1.MASE.t1)
top.5.MASE.t1<-phase1 %>% filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>% dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w1,domain,compare_to_naive_linear,compare_to_naive_rwf,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_aaas(name="Approach")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_aaas(name="Approach")+ylab("MASE")
labels<-c(
eafric = "Exp. African\n-Am. Bias",
easian = "Exp. As-Am. Bias",
egend = "Exp. Gender Bias",
iafric = "Imp. Af-Am. Bias",
iasian = "Imp. As.-Am. Bias",
ideoldem = "Democrats",
ideolrep ="Republicans",
igend = "Imp. Gender Bias",
lifesat = "Life Satisfaction",
negaffect = "Negative Affect",
polar = "Polit. Polarization",
posaffect = "Positive Affect")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_aaas(name="Approach")+ylab("MASE")
labels<-c(
eafric = "Exp. African\n-Am. Bias",
easian = "Exp. Asian\n-Am. Bias",
egend = "Exp. \nGender Bias",
iafric = "Imp. African\n-Am. Bias",
iasian = "Imp. Asian\n-Am. Bias",
ideoldem = "Democrats",
ideolrep ="Republicans",
igend = "Imp.\nGender Bias",
lifesat = "Life\nSatisfaction",
negaffect = "Negative Affect",
polar = "Polit.\nPolarization",
posaffect = "Positive Affect")
top.1.MASE.t1<-phase1 %>% filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>% dplyr::slice_head(n = 1) %>% select(team_name,MASE1_w1,domain,compare_to_naive_linear,compare_to_naive_rwf,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)
top.5.MASE.t1<-phase1 %>% filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>% dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w1,domain,compare_to_naive_linear,compare_to_naive_rwf,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_aaas(name="Approach")+ylab("MASE")
labels<-c(
eafric = "Exp. African\n-Am. Bias",
easian = "Exp. Asian\n-Am. Bias",
egend = "Exp. \nGender Bias",
iafric = "Imp. African\n-Am. Bias",
iasian = "Imp. Asian\n-Am. Bias",
ideoldem = "Dem.\nSupport",
ideolrep ="Rep.\nSupport",
igend = "Imp.\nGender Bias",
lifesat = "Life\nSatisfaction",
negaffect = "Negative\nAffect",
polar = "Polit.\nPolarization",
posaffect = "Positive\nAffect")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_aaas(name="Approach")+ylab("MASE")
proportions(xtabs( ~ Method.code,top.5.MASE.t1))*100 #in total
proportions(xtabs( ~ domain+Method.code,top.5.MASE.t1),"domain")*100 #by domain
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=discipline)) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Field")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=as.factor(previous_tournament.coded))) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Prior Forecasting Experience")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear, fill =compare_to_naive_rwf )) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Field")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear, pattern =compare_to_naive_rwf )) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Field")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear, pattern =compare_to_naive_rwf )) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Comparison\nto Benchmark")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear, group =compare_to_naive_rwf )) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Comparison\nto Benchmark")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear, shape =compare_to_naive_rwf )) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Comparison\nto Benchmark")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear, shape =compare_to_naive_rwf )) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Compared to\nLinear Model")+scale_shape_discrete(name="Compared to\nRandom Walk")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear, shape =compare_to_naive_rwf )) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Compared to\nLinear Model")+scale_shape_discrete(name="Compared to\nRandom Walk")+ylab("MASE")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .5) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_aaas(name="Approach")+ylab("MASE")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear, shape =compare_to_naive_rwf )) +
geom_point(size=3, position=pd, alpha = .5) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Compared to\nLinear Model")+scale_shape_discrete(name="Compared to\nRandom Walk")+ylab("MASE")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=discipline)) +
geom_point(size=3, position=pd, alpha = .7) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Field")
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=discipline)) +
geom_point(size=3, position=pd, alpha = .5) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Field")
proportions(xtabs( ~ discipline,top.5.MASE.t1))*100 #in total
proportions(xtabs( ~ domain+discipline,top.5.MASE.t1),"domain")*100 #by domain
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=as.factor(previous_tournament.coded))) +
geom_point(size=3, position=pd, alpha = .5) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Prior Forecasting Experience")
View(top.5.MASE.t1)
top.5.MASE.t1 %>%  ggplot(aes(x=domain, y=MASE1_w1, colour=as.factor(previous_tournament.coded))) +
geom_point(size=3, position=pd, alpha = .5) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Prior Forecasting Experience")+ylab("MASE")
proportions(xtabs( ~ previous_tournament.coded,top.5.MASE.t1))*100 #in total
proportions(xtabs( ~ previous_tournament.coded,phase1 %>% filter(isExpert.factor == 'Academic') ))*100 #baserate of prior experience to compare to top 5
proportions(xtabs( ~ domain+previous_tournament.coded,top.5.MASE.t1),"domain")*100 #by domain
phase1 %>% filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>% dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)%>%
ggplot(aes(x = domain, y = team_size.coded))+
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +scale_x_discrete(labels=labels, name="")+
labs(colour = "Approach",fill="Approach", x="",y="Size of Top 10 Teams (M +/- 95%CI)")
phase1 %>% filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>% dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)%>%
ggplot(aes(x = domain, y = Method.complex))+
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +scale_x_discrete(labels=labels, name="")+
labs(colour = "Approach",fill="Approach", x="",y="Model complexity (M +/- 95%CI)")
proportions(xtabs( ~ compare_to_naive_linear+isExpert.factor,phase1),"isExpert.factor")*100 #
proportions(xtabs( ~ compare_to_naive_rwf+isExpert.factor,phase1),"isExpert.factor")*100 #
chisq.test(xtabs( ~ compare_to_naive_rwf+isExpert.factor,phase1))
chisq.test(xtabs( ~ compare_to_naive_linear+isExpert.factor,phase1))
##comparison by method
proportions(xtabs( ~ compare_to_naive_linear+Method.code,phase1),"Method.code")*100 #
##comparison by method
proportions(xtabs( ~ compare_to_naive_linear+Method.code,phase1_exp),"Method.code")*100 #
chisq.test(xtabs( ~ compare_to_naive_linear+Method.code,phase1_exp))
chisq.test(xtabs( ~ compare_to_naive_linear+Method.code,phase1))
proportions(xtabs( ~ compare_to_naive_rwf+Method.code,phase1),"Method.code")*100 #
chisq.test(xtabs( ~ compare_to_naive_rwf+Method.code,phase1))
chisq.test(xtabs( ~ compare_to_naive_rwf+Method.code,phase1_exp))
#who won?
top.1.MASE.t2<-academic_only %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% dplyr::slice_head(n = 1) %>% select(team_name,MASE1_w2,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,revised,phase)
#who won?
top.1.MASE.t2<-academic_only %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% dplyr::slice_head(n = 1) %>% select(team_name,MASE1_w2,domain,compare_to_naive_linear_w2,compare_to_naive_rwf_w2,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,revised,phase)
View(top.1.MASE.t2)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(psych)
library(tidyverse)
library(irr)
library(lme4)
library(ggplot2)
library(tidyr)
library(emmeans)
library(car)
library(jtools)
library(dplyr)
library(ggsci)
library(dplyr)
library(Hmisc)
options(max.print = 20000, scipen = 1000)
setwd("~/GitHub/Forecasting-Tournament") #igor's working directory
dat <- read.csv("dat_for_analyses.csv", stringsAsFactors = FALSE)
dat_long <- read.csv("dat_long.csv", stringsAsFactors = FALSE)
# dataset that only includes academic predictions and those who provided open-ended data
academic_only <- filter(dat, isExpert == 1 & !is.na(Method.code))
#datasets that are filtered by phase (1 = May submission, 2 = November submission)
phase1 <- filter(dat, phase == 1& !is.na(Method.code))
phase2 <- filter(dat, phase == 2& !is.na(Method.code))
# Phase 1 & 2further filtered to only include academics won't be necessary once we have updated objective data
phase1_exp <- filter(phase1, isExpert == 1& !is.na(Method.code))
phase2_exp <-filter(phase2, isExpert == 1& !is.na(Method.code))
pd <- position_dodge(0.7) # move them .07 to the left and right
labels<-c(
eafric = "Exp. African\n-Am. Bias",
easian = "Exp. Asian\n-Am. Bias",
egend = "Exp. \nGender Bias",
iafric = "Imp. African\n-Am. Bias",
iasian = "Imp. Asian\n-Am. Bias",
ideoldem = "Dem.\nSupport",
ideolrep ="Rep.\nSupport",
igend = "Imp.\nGender Bias",
lifesat = "Life\nSatisfaction",
negaffect = "Negative\nAffect",
polar = "Polit.\nPolarization",
posaffect = "Positive\nAffect")
top.5.MASE.t2<-academic_only %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w2,compare_to_naive_linear_w2,compare_to_naive_rwf_w2,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,revised,phase)
View(top.5.MASE.t2)
#who won?
top.1.MASE.t2<-academic_only %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% dplyr::slice_head(n = 1) %>% select(team_name,MASE1_w2,domain,compare_to_naive_linear_w2,compare_to_naive_rwf_w2,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
top.5.MASE.t2<-academic_only %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w2,compare_to_naive_linear_w2,compare_to_naive_rwf_w2,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
#who won?
top.1.MASE.t2<-academic_only %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% dplyr::slice_head(n = 1) %>% select(team_name,MASE1_w2,domain,compare_to_naive_linear_w2,compare_to_naive_rwf_w2,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
View(top.1.MASE.t2)
top.5.MASE.t2 %>%  ggplot(aes(x=domain, y=MASE1_w2, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .5) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_aaas(name="Approach")+ylab("MASE")
proportions(xtabs( ~ Method.code,top.5.MASE.t2))*100 #in total
proportions(xtabs( ~ domain+Method.code,top.5.MASE.t2),"domain")*100 #by domain
top.5.MASE.t2 %>%  ggplot(aes(x=domain, y=MASE1_w2, colour=compare_to_naive_linear_w2, shape =compare_to_naive_rwf_w2 )) +
geom_point(size=3, position=pd, alpha = .5) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Compared to\nLinear Model")+scale_shape_discrete(name="Compared to\nRandom Walk")+ylab("MASE")
View(top.5.MASE.t2)
top.5.MASE.t2 %>%  ggplot(aes(x=domain, y=MASE1_w2, colour=discipline)) +
geom_point(size=3, position=pd, alpha = .5) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Field")+ylab("MASE")
proportions(xtabs( ~ discipline,top.5.MASE.t2))*100 #in total
proportions(xtabs( ~ domain+discipline,top.5.MASE.t2),"domain")*100 #by domain
top.5.MASE.t2 %>%  ggplot(aes(x=domain, y=MASE1_w2, colour=as.factor(previous_tournament.coded))) +
geom_point(size=3, position=pd, alpha = .5) + scale_x_discrete(labels=labels, name="")+geom_hline(yintercept =1, linetype='dashed', color='red', 14)+theme(legend.position="top")+scale_colour_d3(name="Prior Forecasting Experience")+ylab("MASE")
proportions(xtabs( ~ previous_tournament.coded,top.5.MASE.t2))*100 #in total
proportions(xtabs( ~ previous_tournament.coded,academic_only))*100 #baserate of prior experience to compare to top 5
83.35626 -78.33333
proportions(xtabs( ~ domain+previous_tournament.coded,top.5.MASE.t1),"domain")*100 #by domain
academic_only  %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w2,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)%>%
ggplot(aes(x = domain, y = team_size.coded))+
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +scale_x_discrete(labels=labels, name="")+
labs(colour = "Approach",fill="Approach", x="",y="Size of Top 10 Teams (M +/- 95%CI)")
academic_only   %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)%>%
ggplot(aes(x = domain, y = Method.complex))+
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +scale_x_discrete(labels=labels, name="")+
labs(colour = "Approach",fill="Approach", x="",y="Model complexity (M +/- 95%CI)")
academic_only  %>%
arrange(domain,MASE1_w2) %>%group_by(domain) %>% dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)%>%
ggplot(aes(x = domain, y = Method.complex))+
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +scale_x_discrete(labels=labels, name="")+
labs(colour = "Approach",fill="Approach", x="",y="Model complexity (M +/- 95%CI)")
##comparison by method among academics
proportions(xtabs( ~ compare_to_naive_linear_w2+Method.code,academic_only),"Method.code")*100 #
chisq.test(xtabs( ~ compare_to_naive_linear_w2+Method.code,academic_only))
proportions(xtabs( ~ compare_to_naive_rwf_w2+Method.code,academic_only),"Method.code")*100 #
##comparison by method among academics
proportions(xtabs( ~ compare_to_naive_linear_w2+Method.code,academic_only),"Method.code")*100 #
proportions(xtabs( ~ compare_to_naive_rwf_w2+Method.code,academic_only),"Method.code")*100 #
table(dat$RMSE_cutoff_Naive_linear_w2)
table(dat$RMSE_cutoff_naive_linear_w2)
table(dat$compare_to_naive_linear_w2)
table(dat$RMSE_cutoff_Naive_rwf_w2)
table(dat$compare_to_naive_rwf_w2)
names(dat)
chisq.test(xtabs( ~ compare_to_naive_rwf_w2+Method.code,academic_only))
chisq.test(xtabs( ~ compare_to_naive_linear_w2+Method.code,academic_only))
proportions(xtabs( ~ compare_to_naive_rwf_w2+Method.code+domain,academic_only),"Method.code")*100 #
proportions(xtabs( ~ compare_to_naive_rwf_w2+Method.code+domain,academic_only),"Method.code:domain")*100 #
proportions(xtabs( ~ compare_to_naive_rwf_w2+Method.code+domain,academic_only))*100 #
proportions(xtabs( ~ compare_to_naive_rwf_w2+Method.code+domain,academic_only),"domain")*100 #
proportions(xtabs( ~ compare_to_naive_rwf_w2+domain,academic_only),"domain")*100 #
proportions(xtabs( ~ compare_to_naive_linear_w2+domain,academic_only),"domain")*100 #
