}
# a hack because mutate hates me
for (i in 1:nrow(decimalinfo)){
decimalinfo$`1`[i] <- decimalplaces(decimalinfo$`1`[i])
decimalinfo$`2`[i] <- decimalplaces(decimalinfo$`2`[i])
decimalinfo$`3`[i] <- decimalplaces(decimalinfo$`3`[i])
decimalinfo$`4`[i] <- decimalplaces(decimalinfo$`4`[i])
decimalinfo$`5`[i] <- decimalplaces(decimalinfo$`5`[i])
decimalinfo$`6`[i] <- decimalplaces(decimalinfo$`6`[i])
decimalinfo$`7`[i] <- decimalplaces(decimalinfo$`7`[i])
decimalinfo$`8`[i] <- decimalplaces(decimalinfo$`8`[i])
decimalinfo$`9`[i] <- decimalplaces(decimalinfo$`9`[i])
decimalinfo$`10`[i] <- decimalplaces(decimalinfo$`10`[i])
decimalinfo$`11`[i] <- decimalplaces(decimalinfo$`11`[i])
decimalinfo$`12`[i] <- decimalplaces(decimalinfo$`12`[i])
}
View(DF_predicted)
decimalinfo <- DF_predicted %>%
pivot_wider(id_cols = c(team_name, domain),
names_from = Month,
values_from = Predicted_Score)
decimalinfo <- DF_predicted %>%
pivot_wider(id_cols = c(team_name, domain, phase),
names_from = Month,
values_from = Predicted_Score)
View(DF_predicted)
names(DF_predicted)
decimalinfo <- DF_predicted %>%
mutate(decimalinfo = decimalplaces(Predicted_Score))
decimalinfo <- DF_predicted
# a hack because mutate hates me
for (i in 1:nrow(decimalinfo)){
decimalinfo$Predicted_Score[i] <- decimalplaces(decimalinfo$Predicted_Score[i])
}
View(decimalinfo)
View(DF_predicted)
decimalinfo <- DF_predicted
View(decimalinfo)
t
# check people who have 1 and 2 rows of data only manually
teams <- as.data.frame(table(DF_predicted$team_name)) %>%
filter(Freq < 3)
View(teams)
as.data.frame(table(DF_predicted$team_name))
temp <- DF_predicted %>%
filter(team_name == team) %>%
filter(phase == phase_num) %>%
pivot_wider(id_cols = c(team_name, domain),
names_from = Month,
values_from = Predicted_Score) %>%
select(-team_name, -domain)
temp
apply(temp, 1, sd, na.rm = T)
temp <- DF_predicted %>%
filter(team_name == team) %>%
filter(phase == phase_num) %>%
pivot_wider(id_cols = c(team_name, domain),
names_from = Month,
values_from = Predicted_Score) %>%
select(-team_name)
apply(temp, 1, sd, na.rm = T)
if (nrow(temp) > 2){
no_variable[[paste0(team, "_", phase_num)]] <- data.frame(
sd = apply(temp %>% select(-domain), 1, sd, na.rm = T),
domain = temp$domain
)
}
b
no_variable <- list()
if (nrow(temp) > 2){
no_variable[[paste0(team, "_", phase_num)]] <- data.frame(
sd = apply(temp %>% select(-domain), 1, sd, na.rm = T),
domain = temp$domain
)
}
no_variable
no_variable <- list()
for (team in teams){
for (phase_num in 1:2){
temp <- DF_predicted %>%
filter(team_name == team) %>%
filter(phase == phase_num) %>%
pivot_wider(id_cols = c(team_name, domain),
names_from = Month,
values_from = Predicted_Score) %>%
select(-team_name)
if (nrow(temp) > 2){
no_variable[[paste0(team, "_", phase_num)]] <- data.frame(
sd = apply(temp %>% select(-domain), 1, sd, na.rm = T),
domain = temp$domain
)
}
}
}
teams <- unique(DF_predicted$team_name)
no_variable <- list()
for (team in teams){
for (phase_num in 1:2){
temp <- DF_predicted %>%
filter(team_name == team) %>%
filter(phase == phase_num) %>%
pivot_wider(id_cols = c(team_name, domain),
names_from = Month,
values_from = Predicted_Score) %>%
select(-team_name)
if (nrow(temp) > 2){
no_variable[[paste0(team, "_", phase_num)]] <- data.frame(
sd = apply(temp %>% select(-domain), 1, sd, na.rm = T),
domain = temp$domain
)
}
}
}
sd_issues <- bind_rows(no_variable)
View(sd_issues)
teams <- unique(DF_predicted$team_name)
no_variable <- list()
for (team in teams){
for (phase_num in 1:2){
temp <- DF_predicted %>%
filter(team_name == team) %>%
filter(phase == phase_num) %>%
pivot_wider(id_cols = c(team_name, domain),
names_from = Month,
values_from = Predicted_Score) %>%
select(-team_name)
if (nrow(temp) > 2){
no_variable[[paste0(team, "_", phase_num)]] <- data.frame(
sd = apply(temp %>% select(-domain), 1, sd, na.rm = T),
domain = temp$domain,
team = team,
phase = phase_num
)
}
}
}
sd_issues <- bind_rows(no_variable)
View(sd_issues)
nrow(sd_issues) # total number of teams by domains by phase
sd_issues
View(sd_issues)
nrow(sd_issues %>% filter(sd == 0))
94/nrow(sd_issues)
nrow(correl_total)/length(correl_num)*100
round(nrow(correl_total)/length(correl_num)*100,2)
round(nrow(sd_issues %>% filter(sd == 0))/nrow(sd_issues)*100,2)
length(correl_num) # total number of possible team/phase combos
nrow(correl_total) # number of teams/phases that have odd correlations
length(correl_num) # total number of possible team/phase combos
knitr::opts_chunk$set(echo = TRUE)
library(rio)
library(dplyr)
library(nlme)
library(tidyr)
library(easystats)
library(ggplot2)
# actual / real answer ... historical data by month
DF_actual <- import("../historical_data.csv") %>%
select(-V1) %>%
pivot_longer(cols = -Month,
names_to = "domain",
values_to = "Actual_Score") %>%
na.omit()
# predicted answer ... month variables
DF_predicted_1 <- import("../Wave1+2data.csv") %>%
filter(phase == 1) %>%
select(team_name, domain, phase, Month.1:Month.12)
# kind of unclear what scores wave 2 were compared to but guess is 1-12 since no historical data is there for 7-18 we assume that's just the time from start of the study
DF_predicted_2 <- import("../Wave1+2data.csv") %>%
filter(phase == 2) %>%
select(team_name, domain, phase, Month.7:Month.18) %>%
rename(Month.12 = Month.18,
Month.11 = Month.17,
Month.10 = Month.16,
Month.9 = Month.15,
Month.8 = Month.14,
Month.7 = Month.13,
Month.6 = Month.12,
Month.5 = Month.11,
Month.4 = Month.10,
Month.3 = Month.9,
Month.2 = Month.8,
Month.1 = Month.7)
DF_predicted <- bind_rows(DF_predicted_1, DF_predicted_2) %>%
pivot_longer(cols = c(Month.1:Month.12),
names_to = "Month",
values_to = "Predicted_Score") %>%
mutate(Month = gsub("Month.", "", Month),
Month = as.integer(Month))
# merge together
DF_long <- DF_predicted %>%
left_join(
DF_actual,
by = c("domain", "Month")
) %>%
na.omit()
head(DF_long)
# rescale
DF_long %>%
group_by(domain) %>%
summarize(min = min(Actual_Score),
max = max(Actual_Score),
min_p = min(Predicted_Score),
max_p = max(Predicted_Score))
DF_long <- DF_long %>%
mutate(Actual_Score =
ifelse(
domain == "ideoldem" | domain == "ideolrep" | domain == "polar",
Actual_Score / 100,
Actual_Score),
Predicted_Score =
ifelse(
domain == "ideoldem" | domain == "ideolrep" | domain == "polar",
Predicted_Score / 100,
Predicted_Score),
Actual_Score =
ifelse(
domain == "negaffect" | domain == "posaffect" | domain == "lifesat",
Actual_Score / 7,
Actual_Score),
Predicted_Score =
ifelse(
domain == "negaffect" | domain == "posaffect" | domain == "lifesat",
Predicted_Score / 7,
Predicted_Score),
Actual_Score = ifelse(
domain == "eafric" | domain == "easian" | domain == "posaffect",
-Actual_Score,
Actual_Score
),
Predicted_Score = ifelse(
domain == "eafric" | domain == "easian" | domain == "posaffect",
-Predicted_Score,
Predicted_Score
)
)
head(DF_long)
store_results <- list()
iter <- 1
for (i in unique(DF_long$team_name)) {
for (q in unique(DF_long$domain)){
for (r in 1:2){
# cat(i)
temp <- DF_long %>%
filter(team_name == i) %>%
filter(domain == q) %>%
filter(phase == r)
if (nrow(temp) > 0){
temp.model <- lm(
Actual_Score ~ Predicted_Score,
data = temp
)
store_results[[iter]] <- data.frame(
team = i,
domain = q,
bias = coef(temp.model)[1],
sensitivity = coef(temp.model)[2],
n_est = nrow(temp),
phase = r
)
iter <- iter + 1
}
}
}
}
DF_results <- bind_rows(store_results)
nrow(DF_results)
DF_results <- DF_results %>%
na.omit()
nrow(DF_results)
model.bias <- lme(
fixed = bias ~ 1,
data = DF_results,
random = list(~1|domain)
)
summary(model.bias)
model.sensitivity <- lme(
fixed = sensitivity ~ 1,
data = DF_results,
random = list(~1|domain),
na.action = "na.omit"
)
summary(model.sensitivity)
ggplot(DF_results, aes(sensitivity, bias, color = domain)) +
geom_point() +
theme_classic() +
xlab("Sensitivity") +
ylab("Bias") +
theme(legend.position = "none")
ggplot(DF_results, aes(sensitivity, bias, color = team)) +
geom_point() +
theme_classic() +
facet_wrap(~domain) +
xlab("Sensitivity") +
ylab("Bias") +
theme(legend.position = "none")
DF_predicted %>%
filter(team_name == "TheMets")
teams <- unique(DF_predicted$team_name)
correl_matrix <- list()
correl_num <- list()
for (team in teams){
for (phase_num in 1:2){
temp <- DF_predicted %>%
filter(team_name == team) %>%
filter(phase == phase_num) %>%
pivot_wider(id_cols = c(team_name, domain),
names_from = Month,
values_from = Predicted_Score) %>%
select(-team_name, -domain)
if (nrow(temp) > 2){
correl_matrix[[paste0(team,"_", phase_num)]] <- temp %>%
reframe(correl = cor(., use = "pairwise.complete.obs")) %>%
as.matrix()
lower.triangle <- correl_matrix[[paste0(team,"_", phase_num)]][lower.tri(as.matrix(correl_matrix[[paste0(team,"_", phase_num)]]), diag = FALSE)]
correl_num[[paste0(team,"_", phase_num)]] <- sum(lower.triangle == 1, na.rm = TRUE)
}
}
}
correl_total <- bind_rows(correl_num) %>%
pivot_longer(cols = everything()) %>%
filter(value > 0)
nrow(correl_total) # number of teams/phases that have odd correlations
length(correl_num) # total number of possible team/phase combos
knitr::opts_chunk$set(echo = TRUE)
library(rio)
library(dplyr)
library(nlme)
library(tidyr)
library(easystats)
library(ggplot2)
# actual / real answer ... historical data by month
DF_actual <- import("../historical_data.csv") %>%
select(-V1) %>%
pivot_longer(cols = -Month,
names_to = "domain",
values_to = "Actual_Score") %>%
na.omit()
# predicted answer ... month variables
DF_predicted_1 <- import("../Wave1+2data.csv") %>%
filter(phase == 1) %>%
select(team_name, domain, phase, Month.1:Month.12)
# kind of unclear what scores wave 2 were compared to but guess is 1-12 since no historical data is there for 7-18 we assume that's just the time from start of the study
DF_predicted_2 <- import("../Wave1+2data.csv") %>%
filter(phase == 2) %>%
select(team_name, domain, phase, Month.7:Month.18) %>%
rename(Month.12 = Month.18,
Month.11 = Month.17,
Month.10 = Month.16,
Month.9 = Month.15,
Month.8 = Month.14,
Month.7 = Month.13,
Month.6 = Month.12,
Month.5 = Month.11,
Month.4 = Month.10,
Month.3 = Month.9,
Month.2 = Month.8,
Month.1 = Month.7)
DF_predicted <- bind_rows(DF_predicted_1, DF_predicted_2) %>%
pivot_longer(cols = c(Month.1:Month.12),
names_to = "Month",
values_to = "Predicted_Score") %>%
mutate(Month = gsub("Month.", "", Month),
Month = as.integer(Month))
# merge together
DF_long <- DF_predicted %>%
left_join(
DF_actual,
by = c("domain", "Month")
) %>%
na.omit()
head(DF_long)
# rescale
DF_long %>%
group_by(domain) %>%
summarize(min = min(Actual_Score),
max = max(Actual_Score),
min_p = min(Predicted_Score),
max_p = max(Predicted_Score))
DF_long <- DF_long %>%
mutate(Actual_Score =
ifelse(
domain == "ideoldem" | domain == "ideolrep" | domain == "polar",
Actual_Score / 100,
Actual_Score),
Predicted_Score =
ifelse(
domain == "ideoldem" | domain == "ideolrep" | domain == "polar",
Predicted_Score / 100,
Predicted_Score),
Actual_Score =
ifelse(
domain == "negaffect" | domain == "posaffect" | domain == "lifesat",
Actual_Score / 7,
Actual_Score),
Predicted_Score =
ifelse(
domain == "negaffect" | domain == "posaffect" | domain == "lifesat",
Predicted_Score / 7,
Predicted_Score),
Actual_Score = ifelse(
domain == "eafric" | domain == "easian" | domain == "posaffect",
-Actual_Score,
Actual_Score
),
Predicted_Score = ifelse(
domain == "eafric" | domain == "easian" | domain == "posaffect",
-Predicted_Score,
Predicted_Score
)
)
head(DF_long)
store_results <- list()
iter <- 1
for (i in unique(DF_long$team_name)) {
for (q in unique(DF_long$domain)){
for (r in 1:2){
# cat(i)
temp <- DF_long %>%
filter(team_name == i) %>%
filter(domain == q) %>%
filter(phase == r)
if (nrow(temp) > 0){
temp.model <- lm(
Actual_Score ~ Predicted_Score,
data = temp
)
store_results[[iter]] <- data.frame(
team = i,
domain = q,
bias = coef(temp.model)[1],
sensitivity = coef(temp.model)[2],
n_est = nrow(temp),
phase = r
)
iter <- iter + 1
}
}
}
}
DF_results <- bind_rows(store_results)
nrow(DF_results)
DF_results <- DF_results %>%
na.omit()
nrow(DF_results)
model.bias <- lme(
fixed = bias ~ 1,
data = DF_results,
random = list(~1|domain)
)
summary(model.bias)
model.sensitivity <- lme(
fixed = sensitivity ~ 1,
data = DF_results,
random = list(~1|domain),
na.action = "na.omit"
)
summary(model.sensitivity)
ggplot(DF_results, aes(sensitivity, bias, color = domain)) +
geom_point() +
theme_classic() +
xlab("Sensitivity") +
ylab("Bias") +
theme(legend.position = "none")
ggplot(DF_results, aes(sensitivity, bias, color = team)) +
geom_point() +
theme_classic() +
facet_wrap(~domain) +
xlab("Sensitivity") +
ylab("Bias") +
theme(legend.position = "none")
DF_predicted %>%
filter(team_name == "TheMets")
teams <- unique(DF_predicted$team_name)
correl_matrix <- list()
correl_num <- list()
for (team in teams){
for (phase_num in 1:2){
temp <- DF_predicted %>%
filter(team_name == team) %>%
filter(phase == phase_num) %>%
pivot_wider(id_cols = c(team_name, domain),
names_from = Month,
values_from = Predicted_Score) %>%
select(-team_name, -domain)
if (nrow(temp) > 2){
correl_matrix[[paste0(team,"_", phase_num)]] <- temp %>%
reframe(correl = cor(., use = "pairwise.complete.obs")) %>%
as.matrix()
lower.triangle <- correl_matrix[[paste0(team,"_", phase_num)]][lower.tri(as.matrix(correl_matrix[[paste0(team,"_", phase_num)]]), diag = FALSE)]
correl_num[[paste0(team,"_", phase_num)]] <- sum(lower.triangle == 1, na.rm = TRUE)
}
}
}
correl_total <- bind_rows(correl_num) %>%
pivot_longer(cols = everything())
View(correl_total)
correl_total <- bind_rows(correl_num) %>%
pivot_longer(cols = everything()) %>%
filter(value > 0)
View(correl_total)
dat <- read.csv("dat_for_analyses.csv", stringsAsFactors = FALSE)
View(dat)
View(data_to_long())
View(data_to_long)
dat_long <- read.csv("dat_long.csv", stringsAsFactors = FALSE)
View(dat_long)
View(dat)
temp <- dat_long %>%
filter(Method.code == "Naive-linear")
temp
View(temp)
