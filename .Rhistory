proportions(xtabs( ~ domain+discipline,top.5.MASE.t1),"domain")*100 #by domain
# Visualize top 5 predictions for each domain as a function of previous forecasting experience
top.5.MASE.t1 %>%
ggplot(aes(x=domain, y=MASE1_w1, colour=as.factor(previous_tournament.coded))) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_d3(name="Prior Forecasting Experience")+ylab("MASE")
# Proportion of top 5 estimates for each domain as a function of previous forecasting experience
proportions(xtabs( ~ previous_tournament.coded,top.5.MASE.t1))*100 #in total
# Proportion of top 5 estimates for each domain as a function of previous forecasting experience for academics only
proportions(xtabs( ~ previous_tournament.coded,phase1 %>% filter(isExpert.factor == 'Academic') ))*100 #baserate of prior experience to compare to top 5
# Proportion of top 5 estimates for each domain as a function of previous forecasting experience for by domain
proportions(xtabs( ~ domain+previous_tournament.coded,top.5.MASE.t1),"domain")*100 #by domain
# Visualize the size of top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise) %>%
ggplot(aes(x = domain, y = team_size.coded)) +
stat_summary(fun.data="mean_cl_boot",  position=pd) +
theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="Size of Top 10 Teams (M +/- 95%CI)")
# Visualize the complexity of the predictions for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>%                                                                           select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise) %>%
ggplot(aes(x = domain, y = Method.complex)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="Model complexity (M +/- 95%CI)")
# Visualize percentage of females in each team for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>%                                                                           select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US ) %>%
ggplot(aes(x = domain, y = team_gender)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="")+
labs(colour = "Approach",fill="Approach", x="",y="% Female per Team (M +/- 95%CI)")
# Visualize education for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US ) %>%
ggplot(aes(x = domain, y = team_education)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y=" (M +/- 95%CI)")
# Visualize team age for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>%
dplyr::slice_head(n = 10) %>%                                                                           select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US ) %>%
ggplot(aes(x = domain, y = team_Age)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="% Average Team Age (M +/- 95%CI)")
# Visualize percentage of non-us team members for 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US )%>%
ggplot(aes(x = domain, y = non_US)) +
stat_summary(fun.data="mean_cl_boot", position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="% Non-US per Team (M +/- 95%CI)")
## Compare performance to naive RW between academics and lay people across domains.
proportions(xtabs( ~ compare_to_naive_rwf_MASE+isExpert.factor,phase1),"isExpert.factor")*100 #
## Compare performance to naive RW between academics and lay people across domains using chi squared test
chisq.test(xtabs( ~ compare_to_naive_rwf_MASE+isExpert.factor,phase1))
## Compare performance to naive RW by method across domains using chi squared test
chisq.test(xtabs( ~ compare_to_naive_rwf_MASE+Method.code,subset(phase1, compare_to_naive_rwf_MASE!="Equal to Naive rwf"))) #exclude equal as it is negligible and screws up calculation
## Compare performance to naive linear between academics and lay people across domains
proportions(xtabs( ~ compare_to_naive_linear_MASE+isExpert.factor,phase1),"isExpert.factor")*100 #
## Compare performance to naive linear between academics and lay people across domains using chi square test.
chisq.test(xtabs( ~ compare_to_naive_linear_MASE+isExpert.factor,phase1))
## Compare performance against Naive RW by method
proportions(xtabs( ~ compare_to_naive_rwf_MASE+Method.code, phase1), "Method.code")*100 #
chisq.test(xtabs( ~ compare_to_naive_rwf_MASE+Method.code,phase1))
## Compare performance against Naive RW by method - just for academics
chisq.test(xtabs( ~ compare_to_naive_rwf_MASE+Method.code,phase1_exp))
# Compare performance against Naive linear by method
proportions(xtabs( ~ compare_to_naive_linear_MASE+Method.code,phase1),"Method.code")*100 #
# Compare performance against Naive linear by method using chi square
chisq.test(xtabs( ~ compare_to_naive_linear_MASE+Method.code,phase1))
# Compare performance against Naive linear by method using chi square just academics
chisq.test(xtabs( ~ compare_to_naive_linear_MASE+Method.code,phase1_exp)) #just comparison of academics
#who won? - identify top performers for each domain using MASE scores in phase 2.
top.1.MASE.t2 <- academic_only  %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain, MASE1_w2) %>%
group_by(domain) %>%
dplyr::slice_head(n = 1) %>%                                                  select(domain,mean_abs_error_w2,MASE1_w2,team_name,mean_abs_percent_error_w2,compare_to_naive_linear_MASE_w2,compare_to_naive_rwf_MASE_w2,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
#median MASE by domain? - compute median accuracy by domain for phase 2.
median.MASE.t2 <- academic_only  %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain) %>%
group_by(domain) %>%
dplyr::summarize(MASE_med = median(MASE1_w2)) %>%
select(domain,MASE_med) %>%
arrange(MASE_med)
#examine top 5 - top 5 performers by domain using MASE scores for academics in phase 2.
top.5.MASE.t2 <- academic_only %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain,MASE1_w2) %>%
group_by(domain) %>%
dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w2,domain,compare_to_naive_linear_MASE_w2,compare_to_naive_rwf_MASE_w2,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
# Visualize top 5 performers as a function of method used.
top.5.MASE.t2 %>%
ggplot(aes(x=domain, y=MASE1_w2, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_aaas(name="Approach") +
ylab("MASE")
# proportion of different methods used across the top 5 performance across all domains.
proportions(xtabs( ~ Method.code,top.5.MASE.t2))*100 #in total
# proportion of different methods used across the top 5 performance by domain
proportions(xtabs( ~ domain+Method.code,top.5.MASE.t2),"domain")*100 #by domain
# Top 5 Performance compared against naive linear and random walk by domain.
top.5.MASE.t2 %>%
ggplot(aes(x=domain, y=MASE1_w2, colour=compare_to_naive_linear_MASE_w2, shape =compare_to_naive_rwf_MASE_w2 )) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top")+
scale_colour_d3(name="Compared to\nLinear Model") +
scale_shape_discrete(name="Compared to\nRandom Walk") +
ylab("MASE")
#examine top 5 - Top 5 winning teams for each domain based on MASE score.
top.5.MASE.t1 <- phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w1,domain,compare_to_naive_linear_MASE,compare_to_naive_rwf_MASE,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)
# Visualize top 5 winners (using MASE scores) by domain and approach.
top.5.MASE.t1  %>%
ggplot(aes(x=domain, y=MASE1_w1, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed',color='red',14) +                                           theme(legend.position="top") +
scale_colour_aaas(name="Approach") +
ylab("MASE")
# Proportion of top 5 predictions by method used across all domains
proportions(xtabs( ~ Method.code,top.5.MASE.t1))*100 #in total
# Proportion of top 5 predictions by method used by domain
proportions(xtabs( ~ domain+Method.code,top.5.MASE.t1),"domain")*100 #by domain
# Visualize top 5 predictions for each domain as they compare to baseline models such as naive linear model and random walk.
top.5.MASE.t1  %>%
ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear_MASE, shape =compare_to_naive_rwf_MASE)) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_d3(name="Compared to\nLinear Model") +                                                     scale_shape_discrete(name="Compared to\nRandom Walk") +
ylab("MASE")
# Visualize top 5 predictions for each domain by discipline
top.5.MASE.t1 %>%
ggplot(aes(x=domain, y=MASE1_w1, colour=discipline)) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_d3(name="Field") +
ylab("MASE")
# Proportion of top 5 predictions for each domain across all domains (so 60 predictions)
proportions(xtabs( ~ discipline, top.5.MASE.t1))*100 #in total
# Proportion of top 5 predictions for each domain by domains
proportions(xtabs( ~ domain+discipline,top.5.MASE.t1),"domain")*100 #by domain
# Visualize top 5 predictions for each domain as a function of previous forecasting experience
top.5.MASE.t1 %>%
ggplot(aes(x=domain, y=MASE1_w1, colour=as.factor(previous_tournament.coded))) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_d3(name="Prior Forecasting Experience")+ylab("MASE")
# Proportion of top 5 estimates for each domain as a function of previous forecasting experience
proportions(xtabs( ~ previous_tournament.coded,top.5.MASE.t1))*100 #in total
# Proportion of top 5 estimates for each domain as a function of previous forecasting experience for academics only
proportions(xtabs( ~ previous_tournament.coded,phase1 %>% filter(isExpert.factor == 'Academic') ))*100 #baserate of prior experience to compare to top 5
# Proportion of top 5 estimates for each domain as a function of previous forecasting experience for by domain
proportions(xtabs( ~ domain+previous_tournament.coded,top.5.MASE.t1),"domain")*100 #by domain
# Visualize the size of top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise) %>%
ggplot(aes(x = domain, y = team_size.coded)) +
stat_summary(fun.data="mean_cl_boot",  position=pd) +
theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="Size of Top 10 Teams (M +/- 95%CI)")
# Visualize the complexity of the predictions for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>%                                                                           select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise) %>%
ggplot(aes(x = domain, y = Method.complex)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="Model complexity (M +/- 95%CI)")
# Visualize percentage of females in each team for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>%                                                                           select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US ) %>%
ggplot(aes(x = domain, y = team_gender)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="")+
labs(colour = "Approach",fill="Approach", x="",y="% Female per Team (M +/- 95%CI)")
# Visualize education for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US ) %>%
ggplot(aes(x = domain, y = team_education)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y=" (M +/- 95%CI)")
# Visualize team age for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>%
dplyr::slice_head(n = 10) %>%                                                                           select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US ) %>%
ggplot(aes(x = domain, y = team_Age)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="% Average Team Age (M +/- 95%CI)")
# Visualize percentage of non-us team members for 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US )%>%
ggplot(aes(x = domain, y = non_US)) +
stat_summary(fun.data="mean_cl_boot", position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="% Non-US per Team (M +/- 95%CI)")
## Compare performance to naive RW between academics and lay people across domains.
proportions(xtabs( ~ compare_to_naive_rwf_MASE+isExpert.factor,phase1),"isExpert.factor")*100 #
## Compare performance to naive RW between academics and lay people across domains.
proportions(xtabs( ~ compare_to_naive_rwf_MASE+isExpert.factor,phase1),"isExpert.factor")*100 #
#who won? - identify top performers for each domain using MASE scores in phase 2.
top.1.MASE.t2 <- academic_only  %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain, MASE1_w2) %>%
group_by(domain) %>%
dplyr::slice_head(n = 1) %>%                                                  select(domain,mean_abs_error_w2,MASE1_w2,team_name,mean_abs_percent_error_w2,compare_to_naive_linear_MASE_w2,compare_to_naive_rwf_MASE,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
#examine top 5 - top 5 performers by domain using MASE scores for academics in phase 2.
top.5.MASE.t2 <- academic_only %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain,MASE1_w2) %>%
group_by(domain) %>%
dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w2,domain,compare_to_naive_linear_MASE_w2,compare_to_naive_linear_MASE_w2,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
# Visualize top 5 performers as a function of method used.
top.5.MASE.t2 %>%
ggplot(aes(x=domain, y=MASE1_w2, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_aaas(name="Approach") +
ylab("MASE")
# proportion of different methods used across the top 5 performance across all domains.
proportions(xtabs( ~ Method.code,top.5.MASE.t2))*100 #in total
# proportion of different methods used across the top 5 performance by domain
proportions(xtabs( ~ domain+Method.code,top.5.MASE.t2),"domain")*100 #by domain
# Top 5 Performance compared against naive linear and random walk by domain.
top.5.MASE.t2 %>%
ggplot(aes(x=domain, y=MASE1_w2, colour=compare_to_naive_linear_MASE_w2, shape =compare_to_naive_linear_MASE_w2 )) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top")+
scale_colour_d3(name="Compared to\nLinear Model") +
scale_shape_discrete(name="Compared to\nRandom Walk") +
ylab("MASE")
#who won? - identify top performers for each domain using MASE scores in phase 2.
top.1.MASE.t2 <- academic_only  %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain, MASE1_w2) %>%
group_by(domain) %>%
dplyr::slice_head(n = 1) %>%                                                  select(domain,mean_abs_error_w2,MASE1_w2,team_name,mean_abs_percent_error_w2,compare_to_naive_linear_MASE_w2,compare_to_naive_rwf_MASE,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
#examine top 5 - top 5 performers by domain using MASE scores for academics in phase 2.
top.5.MASE.t2 <- academic_only %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain,MASE1_w2) %>%
group_by(domain) %>%
dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w2,domain,compare_to_naive_linear_MASE_w2,compare_to_naive_rwf_MASE,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
# Top 5 Performance compared against naive linear and random walk by domain.
top.5.MASE.t2 %>%
ggplot(aes(x=domain, y=MASE1_w2, colour=compare_to_naive_linear_MASE_w2, shape =compare_to_naive_rwf_MASE )) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top")+
scale_colour_d3(name="Compared to\nLinear Model") +
scale_shape_discrete(name="Compared to\nRandom Walk") +
ylab("MASE")
pd <- position_dodge(0.7) # move them .07 to the left and right
labels<-c(
eafric = "Exp. African\n-Am. Bias",
easian = "Exp. Asian\n-Am. Bias",
egend = "Exp. \nGender Bias",
iafric = "Imp. African\n-Am. Bias",
iasian = "Imp. Asian\n-Am. Bias",
ideoldem = "Dem.\nSupport",
ideolrep ="Rep.\nSupport",
igend = "Imp.\nGender Bias",
lifesat = "Life\nSatisfaction",
negaffect = "Negative\nAffect",
polar = "Polit.\nPolarization",
posaffect = "Positive\nAffect")
#who won? - Which of the teams of academics made the best predictions for each of the domains? In other words we identify a winner for each of the domains based on the MASE score (so 12 academic winners in total)
top.1.MASE.t1 <- phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 1) %>% select(team_name,mean_abs_error_w1,MASE1_w1,Month.1:Month.12,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise) %>%           arrange(MASE1_w1)
# median MASE by domain?
median.MASE.t1 <- phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain) %>%
group_by(domain) %>%
dplyr::summarize(MASE_med = median(MASE1_w1)) %>%
select(domain,MASE_med) %>%
arrange(MASE_med)
#examine top 5 - Top 5 winning teams for each domain based on MASE score.
top.5.MASE.t1 <- phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w1,domain,compare_to_naive_linear_MASE,compare_to_naive_rwf_MASE,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise)
top.5.MASE.t1
# Visualize top 5 winners (using MASE scores) by domain and approach.
top.5.MASE.t1  %>%
ggplot(aes(x=domain, y=MASE1_w1, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed',color='red',14) +                                           theme(legend.position="top") +
scale_colour_aaas(name="Approach") +
ylab("MASE")
# Visualize top 5 predictions for each domain as they compare to baseline models such as naive linear model and random walk.
top.5.MASE.t1  %>%
ggplot(aes(x=domain, y=MASE1_w1, colour=compare_to_naive_linear_MASE, shape =compare_to_naive_rwf_MASE)) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_d3(name="Compared to\nLinear Model") +                                                     scale_shape_discrete(name="Compared to\nRandom Walk") +
ylab("MASE")
# Visualize top 5 predictions for each domain by discipline
top.5.MASE.t1 %>%
ggplot(aes(x=domain, y=MASE1_w1, colour=discipline)) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_d3(name="Field") +
ylab("MASE")
# Proportion of top 5 predictions for each domain across all domains (so 60 predictions)
proportions(xtabs( ~ discipline, top.5.MASE.t1))*100 #in total
# Proportion of top 5 predictions for each domain by domains
proportions(xtabs( ~ domain+discipline,top.5.MASE.t1),"domain")*100 #by domain
# Visualize top 5 predictions for each domain as a function of previous forecasting experience
top.5.MASE.t1 %>%
ggplot(aes(x=domain, y=MASE1_w1, colour=as.factor(previous_tournament.coded))) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_d3(name="Prior Forecasting Experience")+ylab("MASE")
# Proportion of top 5 estimates for each domain as a function of previous forecasting experience
proportions(xtabs( ~ previous_tournament.coded,top.5.MASE.t1))*100 #in total
# Proportion of top 5 estimates for each domain as a function of previous forecasting experience for academics only
proportions(xtabs( ~ previous_tournament.coded,phase1 %>% filter(isExpert.factor == 'Academic') ))*100 #baserate of prior experience to compare to top 5
# Proportion of top 5 estimates for each domain as a function of previous forecasting experience for by domain
proportions(xtabs( ~ domain+previous_tournament.coded,top.5.MASE.t1),"domain")*100 #by domain
# Visualize the size of top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise) %>%
ggplot(aes(x = domain, y = team_size.coded)) +
stat_summary(fun.data="mean_cl_boot",  position=pd) +
theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="Size of Top 10 Teams (M +/- 95%CI)")
# Visualize the complexity of the predictions for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>%                                                                           select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise) %>%
ggplot(aes(x = domain, y = Method.complex)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="Model complexity (M +/- 95%CI)")
# Visualize percentage of females in each team for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>%                                                                           select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US ) %>%
ggplot(aes(x = domain, y = team_gender)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="")+
labs(colour = "Approach",fill="Approach", x="",y="% Female per Team (M +/- 95%CI)")
# Visualize education for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US ) %>%
ggplot(aes(x = domain, y = team_education)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y=" (M +/- 95%CI)")
# Visualize team age for top 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%group_by(domain) %>%
dplyr::slice_head(n = 10) %>%                                                                           select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US ) %>%
ggplot(aes(x = domain, y = team_Age)) +
stat_summary(fun.data="mean_cl_boot",  position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="% Average Team Age (M +/- 95%CI)")
# Visualize percentage of non-us team members for 10 teams by domain for academics only
phase1 %>%
filter(isExpert.factor == 'Academic')  %>%
arrange(domain,MASE1_w1) %>%
group_by(domain) %>%
dplyr::slice_head(n = 10) %>% select(team_name,MASE1_w1,domain,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,team_gender,team_education,team_Age,non_US )%>%
ggplot(aes(x = domain, y = non_US)) +
stat_summary(fun.data="mean_cl_boot", position=pd)+theme_minimal(base_size = 14) +
theme(legend.position="bottom") +
scale_x_discrete(labels=labels, name="") +
labs(colour = "Approach",fill="Approach", x="",y="% Non-US per Team (M +/- 95%CI)")
## Compare performance to naive RW between academics and lay people across domains.
proportions(xtabs( ~ compare_to_naive_rwf_MASE+isExpert.factor,phase1),"isExpert.factor")*100 #
## Compare performance to naive RW between academics and lay people across domains using chi squared test
chisq.test(xtabs( ~ compare_to_naive_rwf_MASE+isExpert.factor,phase1))
## Compare performance to naive RW by method across domains using chi squared test
chisq.test(xtabs( ~ compare_to_naive_rwf_MASE+Method.code,subset(phase1, compare_to_naive_rwf_MASE!="Equal to Naive rwf"))) #exclude equal as it is negligible and screws up calculation
## Compare performance to naive linear between academics and lay people across domains
proportions(xtabs( ~ compare_to_naive_linear_MASE+isExpert.factor,phase1),"isExpert.factor")*100 #
## Compare performance to naive RW by method across domains using chi squared test
chisq.test(xtabs( ~ compare_to_naive_rwf_MASE+Method.code,subset(phase1, compare_to_naive_rwf_MASE!="Equal to Naive rwf"))) #exclude equal as it is negligible and screws up calculation
## Compare performance to naive RW between academics and lay people across domains using chi squared test
chisq.test(xtabs( ~ compare_to_naive_rwf_MASE+isExpert.factor,phase1))
## Compare performance to naive RW between academics and lay people across domains.
proportions(xtabs( ~ compare_to_naive_rwf_MASE+isExpert.factor,phase1),"isExpert.factor")*100 #
#who won? - identify top performers for each domain using MASE scores in phase 2.
top.1.MASE.t2 <- academic_only  %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain, MASE1_w2) %>%
group_by(domain) %>%
dplyr::slice_head(n = 1) %>%                                                  select(domain,mean_abs_error_w2,MASE1_w2,team_name,mean_abs_percent_error_w2,compare_to_naive_linear_MASE_w2,compare_to_naive_rwf_MASE,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
#median MASE by domain? - compute median accuracy by domain for phase 2.
median.MASE.t2 <- academic_only  %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain) %>%
group_by(domain) %>%
dplyr::summarize(MASE_med = median(MASE1_w2)) %>%
select(domain,MASE_med) %>%
arrange(MASE_med)
#examine top 5 - top 5 performers by domain using MASE scores for academics in phase 2.
top.5.MASE.t2 <- academic_only %>%
filter(!(phase == 1 & revised == 1)) %>%
arrange(domain,MASE1_w2) %>%
group_by(domain) %>%
dplyr::slice_head(n = 5) %>% select(team_name,MASE1_w2,domain,compare_to_naive_linear_MASE_w2,compare_to_naive_rwf_MASE,team_size.coded,discipline,previous_tournament.coded,Method.code,model,theory,numpred,parameters,Method.complex,team_expertise,phase,revised)
# Visualize top 5 performers as a function of method used.
top.5.MASE.t2 %>%
ggplot(aes(x=domain, y=MASE1_w2, colour=Method.code)) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top") +
scale_colour_aaas(name="Approach") +
ylab("MASE")
# proportion of different methods used across the top 5 performance across all domains.
proportions(xtabs( ~ Method.code,top.5.MASE.t2))*100 #in total
# proportion of different methods used across the top 5 performance by domain
proportions(xtabs( ~ domain+Method.code,top.5.MASE.t2),"domain")*100 #by domain
# Top 5 Performance compared against naive linear and random walk by domain.
top.5.MASE.t2 %>%
ggplot(aes(x=domain, y=MASE1_w2, colour=compare_to_naive_linear_MASE_w2, shape =compare_to_naive_rwf_MASE )) +
geom_point(size=3, position=pd, alpha = .5) +
scale_x_discrete(labels=labels, name="") +
geom_hline(yintercept =1, linetype='dashed', color='red', 14) +                                         theme(legend.position="top")+
scale_colour_d3(name="Compared to\nLinear Model") +
scale_shape_discrete(name="Compared to\nRandom Walk") +
ylab("MASE")
top.5.MASE.t2
